// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/game.proto

#include "game.pb.h"
#include "game.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace userservice {

static const char* UserService_method_names[] = {
  "/userservice.UserService/RegisterPlayer",
  "/userservice.UserService/GetGameState",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel, options));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterPlayer_(UserService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGameState_(UserService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserService::Stub::RegisterPlayer(::grpc::ClientContext* context, const ::userservice::RegisterPlayerRequest& request, ::userservice::RegisterPlayerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::userservice::RegisterPlayerRequest, ::userservice::RegisterPlayerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterPlayer_, context, request, response);
}

void UserService::Stub::async::RegisterPlayer(::grpc::ClientContext* context, const ::userservice::RegisterPlayerRequest* request, ::userservice::RegisterPlayerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::userservice::RegisterPlayerRequest, ::userservice::RegisterPlayerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterPlayer_, context, request, response, std::move(f));
}

void UserService::Stub::async::RegisterPlayer(::grpc::ClientContext* context, const ::userservice::RegisterPlayerRequest* request, ::userservice::RegisterPlayerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterPlayer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::userservice::RegisterPlayerResponse>* UserService::Stub::PrepareAsyncRegisterPlayerRaw(::grpc::ClientContext* context, const ::userservice::RegisterPlayerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::userservice::RegisterPlayerResponse, ::userservice::RegisterPlayerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterPlayer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::userservice::RegisterPlayerResponse>* UserService::Stub::AsyncRegisterPlayerRaw(::grpc::ClientContext* context, const ::userservice::RegisterPlayerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterPlayerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::GetGameState(::grpc::ClientContext* context, const ::userservice::GetGameStateRequest& request, ::userservice::GetGameStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::userservice::GetGameStateRequest, ::userservice::GetGameStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGameState_, context, request, response);
}

void UserService::Stub::async::GetGameState(::grpc::ClientContext* context, const ::userservice::GetGameStateRequest* request, ::userservice::GetGameStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::userservice::GetGameStateRequest, ::userservice::GetGameStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGameState_, context, request, response, std::move(f));
}

void UserService::Stub::async::GetGameState(::grpc::ClientContext* context, const ::userservice::GetGameStateRequest* request, ::userservice::GetGameStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGameState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::userservice::GetGameStateResponse>* UserService::Stub::PrepareAsyncGetGameStateRaw(::grpc::ClientContext* context, const ::userservice::GetGameStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::userservice::GetGameStateResponse, ::userservice::GetGameStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGameState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::userservice::GetGameStateResponse>* UserService::Stub::AsyncGetGameStateRaw(::grpc::ClientContext* context, const ::userservice::GetGameStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGameStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::userservice::RegisterPlayerRequest, ::userservice::RegisterPlayerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::userservice::RegisterPlayerRequest* req,
             ::userservice::RegisterPlayerResponse* resp) {
               return service->RegisterPlayer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::userservice::GetGameStateRequest, ::userservice::GetGameStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::userservice::GetGameStateRequest* req,
             ::userservice::GetGameStateResponse* resp) {
               return service->GetGameState(ctx, req, resp);
             }, this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::RegisterPlayer(::grpc::ServerContext* context, const ::userservice::RegisterPlayerRequest* request, ::userservice::RegisterPlayerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetGameState(::grpc::ServerContext* context, const ::userservice::GetGameStateRequest* request, ::userservice::GetGameStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace userservice

